# Command Line Interface (the Terminal)

This is... admittedly daunting. However, it's incredibly powerful and unlocks a whole world of computing -- so stick with it!

## Functions and arguments (options)
In R, you might see a function of the form `sum(1, na.rm = TRUE)`. Here, `sum` would be the function, and `na.rm` would be an argument.

If this function existed in Linux (it doesn't), it would be in the form `sum 1 --na.rm`. Here, `--na.rm` is called a "flag" or "option". Often these are shortened to one letter and one dash. For example, lets say the `na.rm` flag in our dummy function can be shortened to `n`. This would then be `sum 1 -n`.

If there were another one-dash argument, it could be placed directly after the first. Say an `--abs.val` or `-a` flag takes the absolute value, our code could be `sum 1 --na.rm --abs.val` **OR** `sum 1 -na`.

## Useful CLI commands
### The `--help` flag
Type this after a command for which you need information. It's not guaranteed to work, but most commands have a help page you can call this way.

```{bash}
pwd --help
```

### `pwd`
-   Use the `pwd` command to see where you are (`pwd` stands for "print working directory")

```{bash}
pwd
```

### `ls`
-   Use the `ls` command to list files (`ls` stands for "list")

```{bash}
ls
```

### `cd`
-   Use the `cd` command and one of the directories (folders) to change directories (`cd` stands for "change directory")

```{bash}
pwd
cd delphinus
pwd
```
#### `cd ..`
-   `cd ..` means "go back one folder"

```{bash}
pwd
cd delphinus
pwd
cd ..
pwd
```

#### `cd ~`
-   `cd ~` means "go back to your user directory
```{bash}
pwd
cd ~
pwd
```

#### `cd /`
-   `cd /` goes back to the main server directory. You can access other usersâ€™ directories via `/home`

```{bash}
pwd
cd /
pwd
```

